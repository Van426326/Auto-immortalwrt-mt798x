--- a/modules/luci-mod-status/htdocs/luci-static/resources/view/status/bandwidth.js
+++ b/modules/luci-mod-status/htdocs/luci-static/resources/view/status/bandwidth.js
@@ -247,17 +247,17 @@ render: function(data) {
 		var svg = data[0],
 		    devs = data[1];
 
-		var v = E('div', {}, E('div'));
+		var v = E('div', { 'class': 'cbi-map', 'id': 'map' }, E('div'));
 
 		for (var i = 0; i < devs.length; i++) {
 			var ifname = devs[i].getName();
 
 			if (!ifname)
 				continue;
 
 			var csvg = svg.cloneNode(true);
 
-			v.firstElementChild.appendChild(E('div', { 'data-tab': ifname, 'data-tab-title': ifname }, [
+			v.firstElementChild.appendChild(E('div', { 'class': 'cbi-section', 'data-tab': ifname, 'data-tab-title': ifname }, [
 				csvg,
 				E('div', { 'class': 'right' }, E('small', { 'id': 'scale' }, '-')),
 				E('br'),
@@ -283,7 +283,8 @@ render: function(data) {
 						E('td', { 'class': 'td right top' }, E('strong', {}, [ _('Peak:') ])),
 						E('td', { 'class': 'td', 'id': 'tx_bw_peak' }, rate(0, true))
 					])
-				])
+				]),
+				E('div', {'class': 'cbi-section-create'})
 			]));
 
 			this.updateGraph(ifname, csvg, [ { line: 'rx', counter: true }, null, { line: 'tx', counter: true } ], function(svg, info) {
@@ -309,7 +310,11 @@ render: function(data) {
 
 		this.pollData();
 
-		return v;
+		return  E([], [
+			E('h2', _('Bandwidth')),
+			E('div', {'class': 'cbi-map-descr'}, _('This page displays the bandwidth used for all available physical interfaces.')),
+			v
+		]);
 	},
 
 	handleSaveApply: null,
--- a/modules/luci-mod-status/root/usr/share/luci/menu.d/luci-mod-status.json
+++ b/modules/luci-mod-status/root/usr/share/luci/menu.d/luci-mod-status.json
@@ -112,7 +112,7 @@ "admin/status/realtime/bandwidth": {
 	},
 
 	"admin/status/realtime/bandwidth": {
-		"title": "Traffic",
+		"title": "Bandwidth",
 		"order": 2,
 		"action": {
 			"type": "view",
--- a/modules/luci-mod-status/htdocs/luci-static/resources/svg/channel_analysis.svg
+++ b/modules/luci-mod-status/htdocs/luci-static/resources/svg/channel_analysis.svg
@@ -16,4 +16,21 @@ return view.extend({
 
 	<line x1="0" y1="90%" x2="100%" y2="90%" style="stroke:black;stroke-width:0.1" />
 	<text id="label_10" x="10" y="89%" style="fill:#eee; font-size:9pt; font-family:sans-serif; text-shadow:1px 1px 1px #000">-90 dbm</text>
+	<defs>
+		<linearGradient id="GradientVerticalCenteredBlack">
+			<stop class="stopinvis" offset="0%" />
+			<stop class="stopblack" offset="50%" />
+			<stop class="stopinvis" offset="100%" />
+		</linearGradient>
+	</defs>
+	<style>
+		.stopinvis {
+			stop-color: "transparent";
+			stop-opacity: 0;
+		}
+		.stopblack {
+			stop-color: "black";
+			stop-opacity: .1;
+		}
+	</style>
 </svg>
--- a/modules/luci-mod-status/htdocs/luci-static/resources/view/status/channel_analysis.js
+++ b/modules/luci-mod-status/htdocs/luci-static/resources/view/status/channel_analysis.js
@@ -98,8 +98,7 @@ return view.extend({
 	},
 
 	create_channel_graph: function(chan_analysis, freq_tbl, freq) {
-		var is5GHz = freq == '5GHz',
-		    columns = is5GHz ? freq_tbl.length * 4 : freq_tbl.length + 3,
+		var columns = (freq != '2.4GHz') ? freq_tbl.length * 4 : freq_tbl.length + 3,
 		    chan_graph = chan_analysis.graph,
 		    G = chan_graph.firstElementChild,
 		    step = (chan_graph.offsetWidth - 2) / columns,
@@ -135,7 +134,7 @@ return view.extend({
 			createGraphText(G,curr_offset+step, channel);
 			curr_offset += step;
 
-			if (is5GHz && freq_tbl[i+1]) {
+			if ((freq != '2.4GHz') && freq_tbl[i+1]) {
 				var next_channel = freq_tbl[i+1];
 				/* Check if we are transitioning to another 5Ghz band range */
 				if ((next_channel - channel) == 4) {
@@ -163,6 +162,8 @@ return view.extend({
 
 		chan_analysis.tab.addEventListener('cbi-tab-active', L.bind(function(ev) {
 			this.active_tab = ev.detail.tab;
+			if (!this.radios[this.active_tab].loadedOnce)
+				poll.start();
 		}, this));
 	},
 
@@ -198,7 +199,7 @@
 
 			if (chan_analysis.offset_tbl[local_wifi.channel] != null && local_wifi.center_chan1) {
 				var center_channels = [local_wifi.center_chan1],
-				    chan_width_text = local_wifi.htmode.replace(/(V)*HT/,''),
+				    chan_width_text = local_wifi.htmode.replace(/(V)*H[TE]/,''), /* Handle HT VHT HE */
 				    chan_width = parseInt(chan_width_text)/10;
 
 				if (local_wifi.center_chan2) {
@@ -273,7 +274,7 @@
 						}
 					}
 
-				if (res.vht_operation != null) {
+				if (res.vht_operation != null && res.vht_operation.channel_width > 40) {
 					center_channels[0] = res.vht_operation.center_freq_1;
 					if (res.vht_operation.channel_width == 80) {
 						chan_width = 8;
@@ -306,6 +307,11 @@
 			}
 
 			cbi_update_table(table, rows);
+
+			if (!radio.loadedOnce) {
+				radio.loadedOnce = true;
+				poll.stop();
+			}
 		}, this))
 	},
 
@@ -347,17 +353,29 @@ render: function(data) {
 		var svg = data[0],
 		    wifiDevs = data[1];
 
+		var h2 = E('div', {'class' : 'cbi-title-section'}, [
+			E('h2', {'class': 'cbi-title-field'}, [ _('Channel Analysis') ]),
+			E('div', {'class': 'cbi-title-buttons'  }, [
+				E('button', {
+					'class': 'cbi-button cbi-button-edit',
+					'click': ui.createHandlerFn(this, 'handleScanRefresh')
+				}, [ _('Refresh Channels') ])])
+			]);
+
-		var v = E('div', {}, E('div'));
+		var tabs = E('div', {}, E('div'));
 
 		for (var ifname in wifiDevs) {
 			var freq_tbl = {
 				['2.4GHz'] : [],
 				['5GHz'] : [],
+				['6GHz'] : [],
 			};
 
 			/* Split FrequencyList in Bands */
 			wifiDevs[ifname].freq.forEach(function(freq) {
+				if (freq.mhz >= 5925 && freq.mhz <= 7125) {
+					freq_tbl['6GHz'].push(freq.channel);
-				if (freq.mhz >= 5000) {
+				} else if (freq.mhz >= 5160 && freq.mhz <= 5885) {
 					freq_tbl['5GHz'].push(freq.channel);
 				} else {
 					freq_tbl['2.4GHz'].push(freq.channel);
@@ -392,25 +410,25 @@
 					dev: wifiDevs[ifname].dev,
 					graph: graph_data,
 					table: table,
-					scanCache: {}
+					scanCache: {},
+					loadedOnce: false,
 				};
 
 				cbi_update_table(table, [], E('em', { class: 'spinning' }, _('Starting wireless scan...')));
 
-				v.firstElementChild.appendChild(tab)
+				tabs.firstElementChild.appendChild(tab)
 
 				requestAnimationFrame(L.bind(this.create_channel_graph, this, graph_data, freq_tbl[freq], freq));
 			}
 		}
 
-		ui.tabs.initTabGroup(v.firstElementChild.childNodes);
+		ui.tabs.initTabGroup(tabs.firstElementChild.childNodes);
 
 		this.pollFn = L.bind(this.handleScanRefresh, this);
 
 		poll.add(this.pollFn);
-		poll.start();
 
-		return v;
+		return E('div', {}, [h2, tabs]);
 	},
 
 	handleSaveApply: null,
